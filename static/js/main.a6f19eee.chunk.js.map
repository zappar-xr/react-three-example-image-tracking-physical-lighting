{"version":3,"sources":["assets/example-tracking-image.zpt","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Lights","mesh","useRef","useFrame","time","Date","now","current","position","y","x","Math","cos","ref","scale","castShadow","emissive","THREE","intensity","Stage","receiveShadow","args","color","rotation","PI","Sphere","App","useState","visibleState","setVisibleState","shadowMap","gl","antialias","onNotVisible","onNewAnchor","anchor","console","log","id","onVisible","targetImage","targetFile","visible","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6KAAe,MAA0B,mD,QCUzC,SAASA,IACP,IAAMC,EAAmCC,mBAQzC,OANAC,oBAAS,WAEP,IAAMC,EAAoB,KAAbC,KAAKC,MAClBL,EAAKM,QAAQC,SAASC,EAAIR,EAAKM,QAAQC,SAASE,EAAIC,KAAKC,IAAIR,MAI7D,uBAAMS,IAAKZ,EAAMO,SAAU,CAAC,GAAK,IAAK,GAAIM,MAAO,CAAC,GAAK,GAAK,IAAMC,YAAU,EAA5E,UACE,yCACA,sCAAsBC,SAAU,IAAIC,QAAY,YAChD,4BAAYT,SAAU,CAAC,EAAG,EAAG,GAAIU,UAAW,GAAKH,YAAU,OAMjE,SAASI,IACP,OACE,kCACE,uBAAMJ,YAAU,EAACK,eAAa,EAA9B,UACE,qCAAqBC,KAAM,CAAC,EAAG,KAC/B,sCAAsBC,MAAM,iBAG9B,uBAAMP,YAAU,EAACK,eAAa,EAACG,SAAU,CAACZ,KAAKa,GAAK,EAAG,EAAG,GAAIhB,SAAU,CAAC,EAAG,EAAG,IAA/E,UACE,qCAAqBa,KAAM,CAAC,EAAG,KAC/B,sCAAsBC,MAAM,iBAG9B,uBAAMP,YAAU,EAACK,eAAa,EAACG,SAAU,CAAC,EAAGZ,KAAKa,GAAK,EAAG,GAAIhB,SAAU,EAAE,EAAG,EAAG,IAAhF,UACE,qCAAqBa,KAAM,CAAC,EAAG,KAC/B,sCAAsBC,MAAM,oBAOpC,SAASG,IACP,IAAMxB,EAAmCC,mBAQzC,OANCC,oBAAS,WAEP,IAAMC,EAAoB,KAAbC,KAAKC,MAClBL,EAAKM,QAAQC,SAASE,EAAIT,EAAKM,QAAQC,SAASC,EAAIE,KAAKC,IAAIR,GAAQ,OAItE,uBAAMS,IAAKZ,EAAMc,YAAU,EAACK,eAAa,EAACN,MAAO,CAAC,GAAK,GAAK,IAAMN,SAAU,CAAC,EAAG,EAAG,IAAnF,UACE,yCACA,sCAAsBc,MAAM,eAqCnBI,MAhCf,WAEI,MAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEA,OACE,qCACE,cAAC,uBAAD,IAEA,eAAC,eAAD,CAAcC,WAAS,EAACC,GAAI,CAAEC,WAAW,GAAzC,UAEE,cAAC,eAAD,IAEA,eAAC,eAAD,CACEC,aAAc,WAAQJ,GAAgB,IACtCK,YAAa,SAACC,GAAD,OAAYC,QAAQC,IAAR,qBAA0BF,EAAOG,MAC1DC,UAAW,WAAQV,GAAgB,IACnCW,YAAaC,EACbC,QAASd,EALX,UAQE,cAACT,EAAD,IACA,cAACM,EAAD,IACA,cAACzB,EAAD,OAIF,kCAAkBQ,SAAU,CAAC,IAAK,EAAG,GAAIU,UAAW,IAAKH,YAAU,WChF9D4B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a6f19eee.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/example-tracking-image.775f3d2f.zpt\";","import * as THREE from 'three';\nimport React, { useRef, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport {\n ZapparCamera, ImageTracker, ZapparCanvas, BrowserCompatibility,\n} from '@zappar/zappar-react-three-fiber';\n\nimport targetFile from './assets/example-tracking-image.zpt';\n\n// Lights\nfunction Lights() {\n  const mesh:React.MutableRefObject<any> = useRef();\n\n  useFrame(() => {\n    // Move Light\n    const time = Date.now() * 0.0005;\n    mesh.current.position.y = mesh.current.position.x + Math.cos(time);\n  });\n\n  return (\n    <mesh ref={mesh} position={[0.5, 1.5, 1]} scale={[0.1, 0.1, 0.1]} castShadow>\n      <sphereBufferGeometry />\n      <meshStandardMaterial emissive={new THREE.Color(0xffffee)} />\n      <pointLight position={[0, 0, 0]} intensity={0.5} castShadow />\n    </mesh>\n  );\n}\n\n// Stage\nfunction Stage() {\n  return (\n    <group>\n      <mesh castShadow receiveShadow>\n        <planeBufferGeometry args={[2, 2]} />\n        <meshStandardMaterial color=\"lightblue\" />\n      </mesh>\n\n      <mesh castShadow receiveShadow rotation={[Math.PI / 2, 0, 0]} position={[0, 1, 0.5]}>\n        <planeBufferGeometry args={[2, 1]} />\n        <meshStandardMaterial color=\"lightblue\" />\n      </mesh>\n\n      <mesh castShadow receiveShadow rotation={[0, Math.PI / 2, 0]} position={[-1, 0, 0.5]}>\n        <planeBufferGeometry args={[1, 2]} />\n        <meshStandardMaterial color=\"lightblue\" />\n      </mesh>\n    </group>\n  );\n}\n\n// Sphere\nfunction Sphere() {\n  const mesh:React.MutableRefObject<any> = useRef();\n\n   useFrame(() => {\n     // Move Light\n     const time = Date.now() * 0.0005;\n     mesh.current.position.x = mesh.current.position.y + Math.cos(time) + 0.25;\n   });\n\n  return (\n    <mesh ref={mesh} castShadow receiveShadow scale={[0.2, 0.2, 0.2]} position={[0, 0, 0.5]}>\n      <sphereBufferGeometry />\n      <meshStandardMaterial color=\"hotpink\" />\n    </mesh>\n  );\n}\n\nfunction App() {\n    // Set up states\n    const [visibleState, setVisibleState] = useState(false);\n\n    return (\n      <>\n        <BrowserCompatibility />\n        {/* Setup Zappar Canvas */}\n        <ZapparCanvas shadowMap gl={{ antialias: true }}>\n          {/* Setup Zappar Camera */}\n          <ZapparCamera />\n          {/* Setup Zappar Image Tracker, passing our target file */}\n          <ImageTracker\n            onNotVisible={() => { setVisibleState(false); }}\n            onNewAnchor={(anchor) => console.log(`New anchor ${anchor.id}`)}\n            onVisible={() => { setVisibleState(true); }}\n            targetImage={targetFile}\n            visible={visibleState}\n          >\n            {/* Setup Content */}\n            <Stage />\n            <Sphere />\n            <Lights />\n\n          </ImageTracker>\n          {/* Normal directional light */}\n          <directionalLight position={[2.5, 8, 5]} intensity={1.5} castShadow />\n        </ZapparCanvas>\n      </>\n    );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}